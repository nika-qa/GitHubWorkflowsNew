name: check

on:
  push:
    branches:
      - master
      - staging
      - trying
  pull_request:

jobs:
  # TODO: drop it when GitHub supports its by itself
  cancel-previous:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

  check-license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check license
        run: ./check-license.sh

  check-plugin:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        rust-version: [ 1.47.0, nightly-2020-10-04 ]
        base-ide: [ idea, clion ]
        platform-version: [ 202, 203 ]
        include:
          - os: ubuntu-latest
            # Don't forget to update condition in `Set up additional env variables` step
            rust-version: 1.32.0
            base-ide: idea
            platform-version: 202

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    env:
      ORG_GRADLE_PROJECT_baseIDE: ${{ matrix.base-ide }}
      ORG_GRADLE_PROJECT_platformVersion: ${{ matrix.platform-version }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust-version }}
          components: rust-src, rustfmt, clippy
          default: true

      - name: Cache evcxr
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/evcxr
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-cache-evcxr-${{ matrix.rust-version }}-${{ github.run_id }} # https://github.com/actions/cache/issues/342#issuecomment-673371329
          restore-keys: |
            ${{ runner.os }}-cache-evcxr-${{ matrix.rust-version }}-
      - name: Install evcxr
        if: matrix.os != 'windows-latest' && matrix.rust-version >= '1.40.0' # BACKCOMPAT: Rust 1.39.0
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: evcxr_repl

      - name: Check environment
        run: |
          rustc --version
          rustup component list --installed
          cargo install --list
      - name: Set up additional env variables
        if: matrix.rust-version == '1.32.0'
        # see https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        run: |
          echo "::set-env name=ORG_GRADLE_PROJECT_ideaVersion::IU-2020.2"
          echo "::set-env name=ORG_GRADLE_PROJECT_clionVersion::CL-2020.2"
          echo "::set-env name=ORG_GRADLE_PROJECT_nativeDebugPluginVersion::202.6397.20"
          echo "::set-env name=ORG_GRADLE_PROJECT_graziePluginVersion::202.6397.11"
      - name: Set up test env variables
        run: echo "::set-env name=RUST_SRC_WITH_SYMLINK::$HOME/.rust-src"

      - name: Create symlink for Rust stdlib Unix
        if: matrix.os != 'windows-latest'
        run: ln -s $(rustc --print sysroot)/lib/rustlib/src/rust $RUST_SRC_WITH_SYMLINK

      - name: Create symlink for Rust stdlib Windows
        if: matrix.os == 'windows-latest'
        run: New-Item -ItemType Junction -Path "$env:RUST_SRC_WITH_SYMLINK" -Target "$(rustc --print sysroot)/lib/rustlib/src/rust"

      - name: Download
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ":resolveDependencies -Pkotlin.incremental=false --no-daemon"

      - name: Build
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: "assemble testClasses -Pkotlin.incremental=false --no-daemon"

      - name: Check
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: "check -PexcludeTests=org/rustPerformanceTests/** --continue -Pkotlin.incremental=false --no-daemon"

      - name: Collect fail reports
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: tests-report-${{ matrix.os }}-${{ matrix.rust-version }}-${{ matrix.base-ide }}-${{ matrix.platform-version }}
          path: |
            build/reports/tests
            */build/reports/tests
      - name: Verify plugin
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: ":plugin:verifyPlugin"

      - name: Check bundled Rust formatters
        if: matrix.os != 'windows-latest'
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: "runPrettyPrintersTests --no-daemon"

  check:
    needs: [ check-license, check-plugin ]
    runs-on: ubuntu-latest
    steps:
      - name: Finish check
        run: echo "Check finished successfully!"